/*
 * OutputInfo.as
 *
 * This file was generated by asSchema.
 * http://www.wersling.com
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 */
package net.manaca.application.config.model
{
import net.manaca.xml.XMLNode;
import net.manaca.xml.types.*;

/**
 * The Output publisher
 * @author v-seanzo
 * 
 */    
public class OutputInfo extends XMLNode
{

    private const namespaceURI:String = "www.manaca.net";
    
    /**
     * Constructs a new OutputInfo instance. 
     * @param node The XML to create the new Node object. 
     * @return 
     * 
     */
    public function OutputInfo(node:XML = null)
    {
        if (node == null)
        {
            node = <Output xmlns="www.manaca.net"/>;
        }
        super(node);
    }
    
    /**
     * Gets a define the output display height. 
     * @return a define the output display height. 
     */    
    public function get outputHeight():int
    {
        var result:* = getoutputHeightAt(0);
        if(result)
        {
            return result.getValue();
        }
        else 
        {
            return result;
        }
    }
    
    /**
     * Gets a define the output display height by index. 
     * @return 
     */    
    private function getoutputHeightAt(index:int):SchemaInt
    {
        var node:XML = getChildAt(ATTRIBUTE, namespaceURI, 'outputHeight', index);
        if (node)
        {
            return new SchemaInt(node);
        }
        else
        {
            return null;
        }
    }
    
    /**
     * Sets a define the output display height. 
     */    
    public function set outputHeight(value:int):void
    {
        setoutputHeightAt(0, new SchemaInt(value));
    }
    
    /**
     * Sets a define the output display height by index. 
     * @return 
     */    
    private function setoutputHeightAt(index:int, value:SchemaInt):void
    {
        if (value)
        {
            setChildAt(ATTRIBUTE, namespaceURI, 'outputHeight', index, value.node);
        }
        else
        {
            setChildAt(ATTRIBUTE, namespaceURI, 'outputHeight', index, value);
        }
    }
    
    /**
     * Gets a Number that defines the total count of the outputHeight. 
     * @return a Number that defines the total count of the outputHeight. 
     */    
    public function getoutputHeightCount():Number
    {
        return getChildCount(ATTRIBUTE, namespaceURI, 'outputHeight');
    }
    
    /**
     * Gets a define the output is using strong mode.. 
     * @return a define the output is using strong mode.. 
     */    
    public function get strong():Boolean
    {
        var result:* = getstrongAt(0);
        if(result)
        {
            return result.getValue();
        }
        else 
        {
            return result;
        }
    }
    
    /**
     * Gets a define the output is using strong mode. by index. 
     * @return 
     */    
    private function getstrongAt(index:int):SchemaBoolean
    {
        var node:XML = getChildAt(ATTRIBUTE, namespaceURI, 'strong', index);
        if (node)
        {
            return new SchemaBoolean(node);
        }
        else
        {
            return null;
        }
    }
    
    /**
     * Sets a define the output is using strong mode.. 
     */    
    public function set strong(value:Boolean):void
    {
        setstrongAt(0, new SchemaBoolean(value));
    }
    
    /**
     * Sets a define the output is using strong mode. by index. 
     * @return 
     */    
    private function setstrongAt(index:int, value:SchemaBoolean):void
    {
        if (value)
        {
            setChildAt(ATTRIBUTE, namespaceURI, 'strong', index, value.node);
        }
        else
        {
            setChildAt(ATTRIBUTE, namespaceURI, 'strong', index, value);
        }
    }
    
    /**
     * Gets a Number that defines the total count of the strong. 
     * @return a Number that defines the total count of the strong. 
     */    
    public function getstrongCount():Number
    {
        return getChildCount(ATTRIBUTE, namespaceURI, 'strong');
    }
    
    /**
     * Gets a LogLevel. 
     * @return a LogLevel. 
     * @see net.manaca.application.config.model.LogLevelInfo
     */    
    public function get LogLevel():LogLevelInfo
    {
        return getLogLevelAt(0);
    }
    
    /**
     * Gets a LogLevel by index. 
     * @return 
     * @see net.manaca.application.config.model.LogLevelInfo
     */    
    private function getLogLevelAt(index:int):LogLevelInfo
    {
        var node:XML = getChildAt(ATTRIBUTE, namespaceURI, 'LogLevel', index);
        if (node)
        {
            return new LogLevelInfo(node);
        }
        else
        {
            return null;
        }
    }
    
    /**
     * Sets a LogLevel. 
     * @see net.manaca.application.config.model.LogLevelInfo
     */    
    public function set LogLevel(value:LogLevelInfo):void
    {
        setLogLevelAt(0, value);
    }
    
    /**
     * Sets a LogLevel by index. 
     * @return 
     * @see net.manaca.application.config.model.LogLevelInfo
     */    
    private function setLogLevelAt(index:int, value:LogLevelInfo):void
    {
        if (value)
        {
            setChildAt(ATTRIBUTE, namespaceURI, 'LogLevel', index, value.node);
        }
        else
        {
            setChildAt(ATTRIBUTE, namespaceURI, 'LogLevel', index, value);
        }
    }
    
    /**
     * Gets a Number that defines the total count of the LogLevel. 
     * @return a Number that defines the total count of the LogLevel. 
     */    
    public function getLogLevelCount():Number
    {
        return getChildCount(ATTRIBUTE, namespaceURI, 'LogLevel');
    }
    
    public function clone():OutputInfo
    {
        return new OutputInfo(domNode.copy());
    }
    
    public function toString():String
    {
        var result:String = '------------OutputInfo------------';
        result += '\noutputHeight:' + this.outputHeight;
        result += '\nstrong:' + this.strong;
        result += '\nLogLevel:' + this.LogLevel;
        return result;
    }
}
}