/*
 * SecuritySettingsInfo.as
 *
 * This file was generated by asSchema.
 * http://www.wersling.com
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 */
package net.manaca.application.config.model
{
import net.manaca.xml.XMLNode;
import net.manaca.xml.types.*;

/**
 * secutity settings info
 * @author v-seanzo
 * 
 */    
public class SecuritySettingsInfo extends XMLNode
{

    private const namespaceURI:String = "www.manaca.net";
    
    /**
     * Constructs a new SecuritySettingsInfo instance. 
     * @param node The XML to create the new Node object. 
     * @return 
     * 
     */
    public function SecuritySettingsInfo(node:XML = null)
    {
        if (node == null)
        {
            node = <SecuritySettings xmlns="www.manaca.net"/>;
        }
        super(node);
    }
    
    /**
     * Gets a The cross domain file list. 
     * @return a The cross domain file list. 
     */    
    public function get CrossDomainPolicies():CrossDomainPoliciesInfo
    {
        return getCrossDomainPoliciesAt(0);
    }
    
    /**
     * Gets a The cross domain file list by index. 
     * @return 
     */    
    public function getCrossDomainPoliciesAt(index:int):CrossDomainPoliciesInfo
    {
        var node:XML = getChildAt(ELEMENT, namespaceURI, 'CrossDomainPolicies', index);
        if (node)
        {
            return new CrossDomainPoliciesInfo(node);
        }
        else
        {
            return null;
        }
    }
    
    /**
     * Sets a The cross domain file list. 
     */    
    public function set CrossDomainPolicies(value:CrossDomainPoliciesInfo):void
    {
        setCrossDomainPoliciesAt(0, value);
    }
    
    /**
     * Sets a The cross domain file list by index. 
     * @return 
     */    
    public function setCrossDomainPoliciesAt(index:int, value:CrossDomainPoliciesInfo):void
    {
        if (value)
        {
            setChildAt(ELEMENT, namespaceURI, 'CrossDomainPolicies', index, value.node);
        }
        else
        {
            setChildAt(ELEMENT, namespaceURI, 'CrossDomainPolicies', index, value);
        }
    }
    
    /**
     * Gets a Number that defines the total count of the CrossDomainPolicies. 
     * @return a Number that defines the total count of the CrossDomainPolicies. 
     */    
    public function getCrossDomainPoliciesCount():Number
    {
        return getChildCount(ELEMENT, namespaceURI, 'CrossDomainPolicies');
    }
    
    /**
     * Gets a The allowed domain list. 
     * @return a The allowed domain list. 
     */    
    public function get AllowedDomains():AllowedDomainsInfo
    {
        return getAllowedDomainsAt(0);
    }
    
    /**
     * Gets a The allowed domain list by index. 
     * @return 
     */    
    public function getAllowedDomainsAt(index:int):AllowedDomainsInfo
    {
        var node:XML = getChildAt(ELEMENT, namespaceURI, 'AllowedDomains', index);
        if (node)
        {
            return new AllowedDomainsInfo(node);
        }
        else
        {
            return null;
        }
    }
    
    /**
     * Sets a The allowed domain list. 
     */    
    public function set AllowedDomains(value:AllowedDomainsInfo):void
    {
        setAllowedDomainsAt(0, value);
    }
    
    /**
     * Sets a The allowed domain list by index. 
     * @return 
     */    
    public function setAllowedDomainsAt(index:int, value:AllowedDomainsInfo):void
    {
        if (value)
        {
            setChildAt(ELEMENT, namespaceURI, 'AllowedDomains', index, value.node);
        }
        else
        {
            setChildAt(ELEMENT, namespaceURI, 'AllowedDomains', index, value);
        }
    }
    
    /**
     * Gets a Number that defines the total count of the AllowedDomains. 
     * @return a Number that defines the total count of the AllowedDomains. 
     */    
    public function getAllowedDomainsCount():Number
    {
        return getChildCount(ELEMENT, namespaceURI, 'AllowedDomains');
    }
    
    public function clone():SecuritySettingsInfo
    {
        return new SecuritySettingsInfo(domNode.copy());
    }
    
    public function toString():String
    {
        var result:String = '------------SecuritySettingsInfo------------';
        result += '\nCrossDomainPolicies:' + this.CrossDomainPolicies;
        result += '\nAllowedDomains:' + this.AllowedDomains;
        return result;
    }
}
}