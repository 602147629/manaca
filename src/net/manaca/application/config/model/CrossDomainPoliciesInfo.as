/*
 * CrossDomainPoliciesInfo.as
 *
 * This file was generated by asSchema.
 * http://www.wersling.com
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 */
package net.manaca.application.config.model
{
import net.manaca.xml.XMLNode;
import net.manaca.xml.types.*;

/**
 * The cross domain file list
 * @author v-seanzo
 * 
 */    
public class CrossDomainPoliciesInfo extends XMLNode
{

    private const namespaceURI:String = "www.manaca.net";
    
    /**
     * Constructs a new CrossDomainPoliciesInfo instance. 
     * @param node The XML to create the new Node object. 
     * @return 
     * 
     */
    public function CrossDomainPoliciesInfo(node:XML = null)
    {
        if (node == null)
        {
            node = <CrossDomainPolicies xmlns="www.manaca.net"/>;
        }
        super(node);
    }
    
    /**
     * Add a The cross domain file url. 
     */    
    public function addurl(value:String):void
    {
        var count:uint = geturlCount();
        if (count < geturlMaxCount())
        {
            addChild(ELEMENT, namespaceURI, 'Level', new XML('<url>' + value + '</url>'));
        }
        else
        {
            throw new Error('Exceed the maximum allowable value!');
        }
    }
    
    /**
     * Gets a The cross domain file url. 
     * @return a The cross domain file url. 
     */    
    public function get url():String
    {
        var result:* = geturlAt(0);
        if(result)
        {
            return result.getValue();
        }
        else 
        {
            return result;
        }
    }
    
    /**
     * Gets all The cross domain file url. 
     * @return all The cross domain file url. 
     */    
    public function get urlList():Array
    {
        var result:Array = new Array();
        var len:uint = geturlCount();
        for (var i:uint = 0 ; i < len ; i ++ )
        {
            result.push(geturlAt(i));
        }
        return result;
    }
    
    /**
     * Gets a The cross domain file url by index. 
     * @return 
     */    
    public function geturlAt(index:int):SchemaString
    {
        var node:XML = getChildAt(ELEMENT, namespaceURI, 'url', index);
        if (node)
        {
            return new SchemaString(node);
        }
        else
        {
            return null;
        }
    }
    
    /**
     * Sets a The cross domain file url. 
     */    
    public function set url(value:String):void
    {
        seturlAt(0, new SchemaString(value));
    }
    
    /**
     * Sets a The cross domain file url by index. 
     * @return 
     */    
    public function seturlAt(index:int, value:SchemaString):void
    {
        if (value)
        {
            setChildAt(ELEMENT, namespaceURI, 'url', index, value.node);
        }
        else
        {
            setChildAt(ELEMENT, namespaceURI, 'url', index, value);
        }
    }
    
    /**
     * Gets a Number that defines the minimum count of the url. 
     * @return a Number that defines the minimum count of the url. 
     */    
    public function geturlMinCount():Number
    {
        return 0;
    }
    
    /**
     * Gets a Number that defines the maximal count of the url. 
     * @return a Number that defines the maximal count of the url. 
     */    
    public function geturlMaxCount():Number
    {
        return Infinity;
    }
    
    /**
     * Boolean access to the existence of a designated url. 
     * @return 
     */    
    public function hasurl():Boolean
    {
        return geturlCount() > 0;
    }
    
    /**
     * Gets a Number that defines the total count of the url. 
     * @return a Number that defines the total count of the url. 
     */    
    public function geturlCount():Number
    {
        return getChildCount(ELEMENT, namespaceURI, 'url');
    }
    
    public function clone():CrossDomainPoliciesInfo
    {
        return new CrossDomainPoliciesInfo(domNode.copy());
    }
    
    public function toString():String
    {
        var result:String = '------------CrossDomainPoliciesInfo------------';
        result += '\nurl:' + this.url;
        return result;
    }
}
}