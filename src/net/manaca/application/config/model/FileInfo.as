/*
 * FileInfo.as
 *
 * This file was generated by asSchema.
 * http://www.wersling.com
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 */
package net.manaca.application.config.model
{
import net.manaca.xml.XMLNode;
import net.manaca.xml.types.*;

/**
 * FileInfo
 * @author v-seanzo
 * 
 */    
public class FileInfo extends XMLNode
{

    private const namespaceURI:String = "www.manaca.net";
    
    /**
     * Constructs a new FileInfo instance. 
     * @param node The XML to create the new Node object. 
     * @return 
     * 
     */
    public function FileInfo(node:XML = null)
    {
        if (node == null)
        {
            node = <File xmlns="www.manaca.net"/>;
        }
        super(node);
    }
    
    /**
     * Gets a name. 
     * @return a name. 
     */    
    public function get name():String
    {
        var result:* = getnameAt(0);
        if(result)
        {
            return result.getValue();
        }
        else 
        {
            return result;
        }
    }
    
    /**
     * Gets a name by index. 
     * @return 
     */    
    private function getnameAt(index:int):SchemaString
    {
        var node:XML = getChildAt(ATTRIBUTE, namespaceURI, 'name', index);
        if (node)
        {
            return new SchemaString(node);
        }
        else
        {
            return null;
        }
    }
    
    /**
     * Sets a name. 
     */    
    public function set name(value:String):void
    {
        setnameAt(0, new SchemaString(value));
    }
    
    /**
     * Sets a name by index. 
     * @return 
     */    
    private function setnameAt(index:int, value:SchemaString):void
    {
        if (value)
        {
            setChildAt(ATTRIBUTE, namespaceURI, 'name', index, value.node);
        }
        else
        {
            setChildAt(ATTRIBUTE, namespaceURI, 'name', index, value);
        }
    }
    
    /**
     * Gets a Number that defines the total count of the name. 
     * @return a Number that defines the total count of the name. 
     */    
    public function getnameCount():Number
    {
        return getChildCount(ATTRIBUTE, namespaceURI, 'name');
    }
    
    /**
     * Gets a url. 
     * @return a url. 
     */    
    public function get url():String
    {
        var result:* = geturlAt(0);
        if(result)
        {
            return result.getValue();
        }
        else 
        {
            return result;
        }
    }
    
    /**
     * Gets a url by index. 
     * @return 
     */    
    private function geturlAt(index:int):SchemaString
    {
        var node:XML = getChildAt(ATTRIBUTE, namespaceURI, 'url', index);
        if (node)
        {
            return new SchemaString(node);
        }
        else
        {
            return null;
        }
    }
    
    /**
     * Sets a url. 
     */    
    public function set url(value:String):void
    {
        seturlAt(0, new SchemaString(value));
    }
    
    /**
     * Sets a url by index. 
     * @return 
     */    
    private function seturlAt(index:int, value:SchemaString):void
    {
        if (value)
        {
            setChildAt(ATTRIBUTE, namespaceURI, 'url', index, value.node);
        }
        else
        {
            setChildAt(ATTRIBUTE, namespaceURI, 'url', index, value);
        }
    }
    
    /**
     * Gets a Number that defines the total count of the url. 
     * @return a Number that defines the total count of the url. 
     */    
    public function geturlCount():Number
    {
        return getChildCount(ATTRIBUTE, namespaceURI, 'url');
    }
    
    /**
     * Gets a FileType. 
     * @return a FileType. 
     * @see net.manaca.application.config.model.FileTypeInfo
     */    
    public function get FileType():FileTypeInfo
    {
        return getFileTypeAt(0);
    }
    
    /**
     * Gets a FileType by index. 
     * @return 
     * @see net.manaca.application.config.model.FileTypeInfo
     */    
    private function getFileTypeAt(index:int):FileTypeInfo
    {
        var node:XML = getChildAt(ATTRIBUTE, namespaceURI, 'FileType', index);
        if (node)
        {
            return new FileTypeInfo(node);
        }
        else
        {
            return null;
        }
    }
    
    /**
     * Sets a FileType. 
     * @see net.manaca.application.config.model.FileTypeInfo
     */    
    public function set FileType(value:FileTypeInfo):void
    {
        setFileTypeAt(0, value);
    }
    
    /**
     * Sets a FileType by index. 
     * @return 
     * @see net.manaca.application.config.model.FileTypeInfo
     */    
    private function setFileTypeAt(index:int, value:FileTypeInfo):void
    {
        if (value)
        {
            setChildAt(ATTRIBUTE, namespaceURI, 'FileType', index, value.node);
        }
        else
        {
            setChildAt(ATTRIBUTE, namespaceURI, 'FileType', index, value);
        }
    }
    
    /**
     * Gets a Number that defines the total count of the FileType. 
     * @return a Number that defines the total count of the FileType. 
     */    
    public function getFileTypeCount():Number
    {
        return getChildCount(ATTRIBUTE, namespaceURI, 'FileType');
    }
    
    public function clone():FileInfo
    {
        return new FileInfo(domNode.copy());
    }
    
    public function toString():String
    {
        var result:String = '------------FileInfo------------';
        result += '\nname:' + this.name;
        result += '\nurl:' + this.url;
        result += '\nFileType:' + this.FileType;
        return result;
    }
}
}