/*
 * AddInfo.as
 *
 * This file was generated by asSchema.
 * http://www.wersling.com
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 */
package net.manaca.application.config.model
{
import net.manaca.xml.XMLNode;
import net.manaca.xml.types.*;

/**
 * AddInfo
 * @author v-seanzo
 * 
 */    
public class AddInfo extends XMLNode
{

    private const namespaceURI:String = "www.manaca.net";
    
    /**
     * Constructs a new AddInfo instance. 
     * @param node The XML to create the new Node object. 
     * @return 
     * 
     */
    public function AddInfo(node:XML = null)
    {
        if (node == null)
        {
            node = <Add xmlns="www.manaca.net"/>;
        }
        super(node);
    }
    
    /**
     * Gets a key. 
     * @return a key. 
     */    
    public function get key():String
    {
        var result:* = getkeyAt(0);
        if(result)
        {
            return result.getValue();
        }
        else 
        {
            return result;
        }
    }
    
    /**
     * Gets a key by index. 
     * @return 
     */    
    private function getkeyAt(index:int):SchemaString
    {
        var node:XML = getChildAt(ATTRIBUTE, namespaceURI, 'key', index);
        if (node)
        {
            return new SchemaString(node);
        }
        else
        {
            return null;
        }
    }
    
    /**
     * Sets a key. 
     */    
    public function set key(value:String):void
    {
        setkeyAt(0, new SchemaString(value));
    }
    
    /**
     * Sets a key by index. 
     * @return 
     */    
    private function setkeyAt(index:int, value:SchemaString):void
    {
        if (value)
        {
            setChildAt(ATTRIBUTE, namespaceURI, 'key', index, value.node);
        }
        else
        {
            setChildAt(ATTRIBUTE, namespaceURI, 'key', index, value);
        }
    }
    
    /**
     * Gets a Number that defines the total count of the key. 
     * @return a Number that defines the total count of the key. 
     */    
    public function getkeyCount():Number
    {
        return getChildCount(ATTRIBUTE, namespaceURI, 'key');
    }
    
    /**
     * Gets a value. 
     * @return a value. 
     */    
    public function get value():String
    {
        var result:* = getvalueAt(0);
        if(result)
        {
            return result.getValue();
        }
        else 
        {
            return result;
        }
    }
    
    /**
     * Gets a value by index. 
     * @return 
     */    
    private function getvalueAt(index:int):SchemaString
    {
        var node:XML = getChildAt(ATTRIBUTE, namespaceURI, 'value', index);
        if (node)
        {
            return new SchemaString(node);
        }
        else
        {
            return null;
        }
    }
    
    /**
     * Sets a value. 
     */    
    public function set value(value:String):void
    {
        setvalueAt(0, new SchemaString(value));
    }
    
    /**
     * Sets a value by index. 
     * @return 
     */    
    private function setvalueAt(index:int, value:SchemaString):void
    {
        if (value)
        {
            setChildAt(ATTRIBUTE, namespaceURI, 'value', index, value.node);
        }
        else
        {
            setChildAt(ATTRIBUTE, namespaceURI, 'value', index, value);
        }
    }
    
    /**
     * Gets a Number that defines the total count of the value. 
     * @return a Number that defines the total count of the value. 
     */    
    public function getvalueCount():Number
    {
        return getChildCount(ATTRIBUTE, namespaceURI, 'value');
    }
    
    public function clone():AddInfo
    {
        return new AddInfo(domNode.copy());
    }
    
    public function toString():String
    {
        var result:String = '------------AddInfo------------';
        result += '\nkey:' + this.key;
        result += '\nvalue:' + this.value;
        return result;
    }
}
}