/*
 * AppSettingsInfo.as
 *
 * This file was generated by asSchema.
 * http://www.wersling.com
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 */
package net.manaca.application.config.model
{
import net.manaca.xml.XMLNode;
import net.manaca.xml.types.*;

/**
 * application settings info
 * @author v-seanzo
 * 
 */    
public class AppSettingsInfo extends XMLNode
{

    private const namespaceURI:String = "www.manaca.net";
    
    /**
     * Constructs a new AppSettingsInfo instance. 
     * @param node The XML to create the new Node object. 
     * @return 
     * 
     */
    public function AppSettingsInfo(node:XML = null)
    {
        if (node == null)
        {
            node = <AppSettings xmlns="www.manaca.net"/>;
        }
        super(node);
    }
    
    /**
     * Gets a secutity settings info. 
     * @return a secutity settings info. 
     */    
    public function get SecuritySettings():SecuritySettingsInfo
    {
        return getSecuritySettingsAt(0);
    }
    
    /**
     * Gets a secutity settings info by index. 
     * @return 
     */    
    public function getSecuritySettingsAt(index:int):SecuritySettingsInfo
    {
        var node:XML = getChildAt(ELEMENT, namespaceURI, 'SecuritySettings', index);
        if (node)
        {
            return new SecuritySettingsInfo(node);
        }
        else
        {
            return null;
        }
    }
    
    /**
     * Sets a secutity settings info. 
     */    
    public function set SecuritySettings(value:SecuritySettingsInfo):void
    {
        setSecuritySettingsAt(0, value);
    }
    
    /**
     * Sets a secutity settings info by index. 
     * @return 
     */    
    public function setSecuritySettingsAt(index:int, value:SecuritySettingsInfo):void
    {
        if (value)
        {
            setChildAt(ELEMENT, namespaceURI, 'SecuritySettings', index, value.node);
        }
        else
        {
            setChildAt(ELEMENT, namespaceURI, 'SecuritySettings', index, value);
        }
    }
    
    /**
     * Gets a Number that defines the total count of the SecuritySettings. 
     * @return a Number that defines the total count of the SecuritySettings. 
     */    
    public function getSecuritySettingsCount():Number
    {
        return getChildCount(ELEMENT, namespaceURI, 'SecuritySettings');
    }
    
    /**
     * Gets a logging settings info. 
     * @return a logging settings info. 
     */    
    public function get LoggingSettings():LoggingSettingsInfo
    {
        return getLoggingSettingsAt(0);
    }
    
    /**
     * Gets a logging settings info by index. 
     * @return 
     */    
    public function getLoggingSettingsAt(index:int):LoggingSettingsInfo
    {
        var node:XML = getChildAt(ELEMENT, namespaceURI, 'LoggingSettings', index);
        if (node)
        {
            return new LoggingSettingsInfo(node);
        }
        else
        {
            return null;
        }
    }
    
    /**
     * Sets a logging settings info. 
     */    
    public function set LoggingSettings(value:LoggingSettingsInfo):void
    {
        setLoggingSettingsAt(0, value);
    }
    
    /**
     * Sets a logging settings info by index. 
     * @return 
     */    
    public function setLoggingSettingsAt(index:int, value:LoggingSettingsInfo):void
    {
        if (value)
        {
            setChildAt(ELEMENT, namespaceURI, 'LoggingSettings', index, value.node);
        }
        else
        {
            setChildAt(ELEMENT, namespaceURI, 'LoggingSettings', index, value);
        }
    }
    
    /**
     * Gets a Number that defines the total count of the LoggingSettings. 
     * @return a Number that defines the total count of the LoggingSettings. 
     */    
    public function getLoggingSettingsCount():Number
    {
        return getChildCount(ELEMENT, namespaceURI, 'LoggingSettings');
    }
    
    /**
     * Gets a version. 
     * @return a version. 
     */    
    public function get version():String
    {
        var result:* = getversionAt(0);
        if(result)
        {
            return result.getValue();
        }
        else 
        {
            return result;
        }
    }
    
    /**
     * Gets a version by index. 
     * @return 
     */    
    public function getversionAt(index:int):SchemaString
    {
        var node:XML = getChildAt(ELEMENT, namespaceURI, 'version', index);
        if (node)
        {
            return new SchemaString(node);
        }
        else
        {
            return null;
        }
    }
    
    /**
     * Sets a version. 
     */    
    public function set version(value:String):void
    {
        setversionAt(0, new SchemaString(value));
    }
    
    /**
     * Sets a version by index. 
     * @return 
     */    
    public function setversionAt(index:int, value:SchemaString):void
    {
        if (value)
        {
            setChildAt(ELEMENT, namespaceURI, 'version', index, value.node);
        }
        else
        {
            setChildAt(ELEMENT, namespaceURI, 'version', index, value);
        }
    }
    
    /**
     * Gets a Number that defines the total count of the version. 
     * @return a Number that defines the total count of the version. 
     */    
    public function getversionCount():Number
    {
        return getChildCount(ELEMENT, namespaceURI, 'version');
    }
    
    public function clone():AppSettingsInfo
    {
        return new AppSettingsInfo(domNode.copy());
    }
    
    public function toString():String
    {
        var result:String = '------------AppSettingsInfo------------';
        result += '\nSecuritySettings:' + this.SecuritySettings;
        result += '\nLoggingSettings:' + this.LoggingSettings;
        result += '\nversion:' + this.version;
        return result;
    }
}
}