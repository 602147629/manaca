/*
 * FilesInfo.as
 *
 * This file was generated by asSchema.
 * http://www.wersling.com
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 */
package net.manaca.application.config.model
{
import net.manaca.xml.XMLNode;
import net.manaca.xml.types.*;

/**
 * The external file list
 * @author v-seanzo
 * 
 */    
public class FilesInfo extends XMLNode
{

    private const namespaceURI:String = "www.manaca.net";
    
    /**
     * Constructs a new FilesInfo instance. 
     * @param node The XML to create the new Node object. 
     * @return 
     * 
     */
    public function FilesInfo(node:XML = null)
    {
        if (node == null)
        {
            node = <Files xmlns="www.manaca.net"/>;
        }
        super(node);
    }
    
    /**
     * Add a File. 
     */    
    public function addFile(value:FileInfo):void
    {
        var count:uint = getFileCount();
        if (count < getFileMaxCount())
        {
            addChild(ELEMENT, namespaceURI, 'Level', value.node.copy());
        }
        else
        {
            throw new Error('Exceed the maximum allowable value!');
        }
    }
    
    /**
     * Gets a File. 
     * @return a File. 
     */    
    public function get File():FileInfo
    {
        return getFileAt(0);
    }
    
    /**
     * Gets all File. 
     * @return all File. 
     */    
    public function get FileList():Array
    {
        var result:Array = new Array();
        var len:uint = getFileCount();
        for (var i:uint = 0 ; i < len ; i ++ )
        {
            result.push(getFileAt(i));
        }
        return result;
    }
    
    /**
     * Gets a File by index. 
     * @return 
     */    
    public function getFileAt(index:int):FileInfo
    {
        var node:XML = getChildAt(ELEMENT, namespaceURI, 'File', index);
        if (node)
        {
            return new FileInfo(node);
        }
        else
        {
            return null;
        }
    }
    
    /**
     * Sets a File. 
     */    
    public function set File(value:FileInfo):void
    {
        setFileAt(0, value);
    }
    
    /**
     * Sets a File by index. 
     * @return 
     */    
    public function setFileAt(index:int, value:FileInfo):void
    {
        if (value)
        {
            setChildAt(ELEMENT, namespaceURI, 'File', index, value.node);
        }
        else
        {
            setChildAt(ELEMENT, namespaceURI, 'File', index, value);
        }
    }
    
    /**
     * Gets a Number that defines the minimum count of the File. 
     * @return a Number that defines the minimum count of the File. 
     */    
    public function getFileMinCount():Number
    {
        return 0;
    }
    
    /**
     * Gets a Number that defines the maximal count of the File. 
     * @return a Number that defines the maximal count of the File. 
     */    
    public function getFileMaxCount():Number
    {
        return Infinity;
    }
    
    /**
     * Boolean access to the existence of a designated File. 
     * @return 
     */    
    public function hasFile():Boolean
    {
        return getFileCount() > 0;
    }
    
    /**
     * Gets a Number that defines the total count of the File. 
     * @return a Number that defines the total count of the File. 
     */    
    public function getFileCount():Number
    {
        return getChildCount(ELEMENT, namespaceURI, 'File');
    }
    
    public function clone():FilesInfo
    {
        return new FilesInfo(domNode.copy());
    }
    
    public function toString():String
    {
        var result:String = '------------FilesInfo------------';
        result += '\nFile:' + this.File;
        return result;
    }
}
}