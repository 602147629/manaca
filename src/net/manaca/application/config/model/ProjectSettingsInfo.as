/*
 * ProjectSettingsInfo.as
 *
 * This file was generated by asSchema.
 * http://www.wersling.com
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 */
package net.manaca.application.config.model
{
import net.manaca.xml.XMLNode;
import net.manaca.xml.types.*;

/**
 * project settings info
 * @author v-seanzo
 * 
 */    
public class ProjectSettingsInfo extends XMLNode
{

    private const namespaceURI:String = "www.manaca.net";
    
    /**
     * Constructs a new ProjectSettingsInfo instance. 
     * @param node The XML to create the new Node object. 
     * @return 
     * 
     */
    public function ProjectSettingsInfo(node:XML = null)
    {
        if (node == null)
        {
            node = <ProjectSettings xmlns="www.manaca.net"/>;
        }
        super(node);
    }
    
    /**
     * Add a Add. 
     */    
    public function addAdd(value:AddInfo):void
    {
        var count:uint = getAddCount();
        if (count < getAddMaxCount())
        {
            addChild(ELEMENT, namespaceURI, 'Level', value.node.copy());
        }
        else
        {
            throw new Error('Exceed the maximum allowable value!');
        }
    }
    
    /**
     * Gets a Add. 
     * @return a Add. 
     */    
    public function get Add():AddInfo
    {
        return getAddAt(0);
    }
    
    /**
     * Gets all Add. 
     * @return all Add. 
     */    
    public function get AddList():Array
    {
        var result:Array = new Array();
        var len:uint = getAddCount();
        for (var i:uint = 0 ; i < len ; i ++ )
        {
            result.push(getAddAt(i));
        }
        return result;
    }
    
    /**
     * Gets a Add by index. 
     * @return 
     */    
    public function getAddAt(index:int):AddInfo
    {
        var node:XML = getChildAt(ELEMENT, namespaceURI, 'Add', index);
        if (node)
        {
            return new AddInfo(node);
        }
        else
        {
            return null;
        }
    }
    
    /**
     * Sets a Add. 
     */    
    public function set Add(value:AddInfo):void
    {
        setAddAt(0, value);
    }
    
    /**
     * Sets a Add by index. 
     * @return 
     */    
    public function setAddAt(index:int, value:AddInfo):void
    {
        if (value)
        {
            setChildAt(ELEMENT, namespaceURI, 'Add', index, value.node);
        }
        else
        {
            setChildAt(ELEMENT, namespaceURI, 'Add', index, value);
        }
    }
    
    /**
     * Gets a Number that defines the minimum count of the Add. 
     * @return a Number that defines the minimum count of the Add. 
     */    
    public function getAddMinCount():Number
    {
        return 0;
    }
    
    /**
     * Gets a Number that defines the maximal count of the Add. 
     * @return a Number that defines the maximal count of the Add. 
     */    
    public function getAddMaxCount():Number
    {
        return Infinity;
    }
    
    /**
     * Boolean access to the existence of a designated Add. 
     * @return 
     */    
    public function hasAdd():Boolean
    {
        return getAddCount() > 0;
    }
    
    /**
     * Gets a Number that defines the total count of the Add. 
     * @return a Number that defines the total count of the Add. 
     */    
    public function getAddCount():Number
    {
        return getChildCount(ELEMENT, namespaceURI, 'Add');
    }
    
    public function clone():ProjectSettingsInfo
    {
        return new ProjectSettingsInfo(domNode.copy());
    }
    
    public function toString():String
    {
        var result:String = '------------ProjectSettingsInfo------------';
        result += '\nAdd:' + this.Add;
        return result;
    }
}
}