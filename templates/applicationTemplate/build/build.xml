<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     2009-4-16 上午10:36:30                                                        

     ScaleTester    
                   
     v-seanzo                                                                
     ====================================================================== -->
<project name="ScaleTester" basedir="../" default="build-all-debug">
        
    <property environment="env"/>
    <!-- Define variables/paths used in this build script -->
    <property file="./build/build.properties" />
        
    <!-- - - - - - - - - - - - - - - - - - 
          target: properties              
          Have you edit the properties file to make sure the paths are right 
          oo your system?
         - - - - - - - - - - - - - - - - -  -->
    <target name="properties">
        <fail unless="asdoc.exe">The "asdoc.exe" property must be set in ${build.dir}/build.properties.</fail>
        <fail unless="compc.exe">The "compc.exe" property must be set in ${build.dir}/build.properties.</fail>
        <fail unless="mxmlc.exe">The "mxmlc.exe" property must be set in ${build.dir}/build.properties.</fail>
    </target>
    
    <!-- - - - - - - - - - - - - - - - - - 
          target: compile-tests                      
          Compile the unit tests for the library, placing the test runner .swf 
          file in the bin directory.
         - - - - - - - - - - - - - - - - - -->
    <target name="compile-tests" depends="properties, create-test-suite">
        <!-- copy file to bin dir -->
        <copy todir="${bin.dir}" includeEmptyDirs="false">
            <fileset dir="${tests.dir}/${testRunner.dir}">
                <exclude name="**/*.as" />
                <exclude name="**/*.mxml" />
            </fileset>
        </copy>
        
        <exec executable="${mxmlc.exe}" dir="${basedir}">
            <!-- Point to the main test runner's application mxml file -->
            <arg line="'${tests.dir}/${testRunner.dir}/${testRunner.name}.mxml'" />
            
            <!-- Use AIR configuration file -->
            <!--
            <arg line="-load-config '${flex.sdk.lib.dir}/../air-config.xml'" />
            -->
            
            <!-- Place the built .swf file in the "bin" directory -->
            <arg line="-o '${bin.dir}/${testRunner.name}.swf'" />
            
            <!-- Define source directories for "src" and "tests" -->
            <arg line="-sp ${src.dir}" />
            <arg line="-sp ${tests.dir}/src" />
            
            <!-- Include the necessary framework libraries in the class path -->
            <arg line="-l '${flex.sdk.lib.dir}'" />
            
            <!-- Include in the flexunit.swc in the class path -->
            <arg line="-l ${flexunit.swc}" />
            
            <!-- Include locale-specific items in the path -->
            <arg line="-locale ${flex.sdk.locale}" />
            <arg line="-l '${flex.sdk.locale.dir}'" />
        </exec>
    </target>

    <!-- - - - - - - - - - - - - - - - - - 
          target: create-test-suite                      
         - - - - - - - - - - - - - - - - - -->
    <target name="create-test-suite">
        <java classname="com.allurent.flexunit.framework.AllTestsFileGenerator" 
            fork="true" failonerror="true" logError="true"
            output="${tests.dir}/src/FlexUnitAllTests.as">
            <classpath>
                <pathelement location="${build.dir}/arc-flexunit.jar" />
            </classpath>
            <arg value="${tests.dir}/src" />
            <arg value="arc-flexunit.filters" />
        </java>
    </target>

    <!-- - - - - - - - - - - - - - - - - - 
          target: tests                      
          Runs the unit tests for the library in the stand-alone Flash Player
         - - - - - - - - - - - - - - - - - -->
    <target name="tests" depends="compile-tests">
        <!--
            If/When we add support for determinig the status of unit tests
            as part of the ANT build process, we need to change the spawn to
            "no" so that ANT waits until the test runner closes before
            proceeding.
        -->
        <exec executable="${flashDebugPlayer.exe}" spawn="yes">
            <arg line="${bin.dir}/${testRunner.name}.swf" />
        </exec>
    </target>
    
    <!-- - - - - - - - - - - - - - - - - - 
          target: library                      
          Compile all of the classes under the 'src' tree into a .swc file
         - - - - - - - - - - - - - - - - - -->
    <target name="library" depends="properties">
        <exec executable="${compc.exe}" dir="${basedir}" failonerror="true">
            <!-- Specify the name of the output file -->
            <arg line="-o '${bin.dir}/${library.name}.swc'" />
            
            <!-- Specify the main source path as "src" -->
            <arg line="-sp ${src.dir}" />
            <arg value="-library-path=${src.libs}"/>
            <!-- Include all of the classes in the "src" tree -->
            <arg line="-is ${src.dir}" />
        </exec>
    </target>
    
    <!-- - - - - - - - - - - - - - - - - - 
          target: docs                      
          Generate ASDoc output for the library
         - - - - - - - - - - - - - - - - - -->
    <target name="docs" depends="properties">
        <!-- Clean out the contents of the doc directory, without delete "docs" -->
        <!--
        <delete includeemptydirs="true">
            <fileset dir="${docs.dir}" includes="**/*" />
        </delete>
        -->
        
        <exec executable="${asdoc.exe}" dir="${basedir}" failonerror="true">
            <arg value="-doc-sources=${src.dir}/${document.root}.as"/>
            <arg value="-source-path=${src.dir}"/>
            <arg value="-library-path=${src.libs}"/>
            <arg value="-window-title=${asdoc.window.title}"/>
            <arg value="-main-title=${application.name}"/>
            <arg value="-footer=${application.name} ${asdoc.footer}"/>
            <arg value="-left-frameset-width=${asdoc.left.frameset.width}"/>
            <arg value="-output=${docs.dir}"/>
        </exec>
    </target>
    
    <!-- - - - - - - - - - - - - - - - - - 
          target: project                      
         - - - - - - - - - - - - - - - - - -->
    <target name="project" depends="properties">
        <exec executable="${mxmlc.exe}" dir="${basedir}" failonerror="true">
            <arg value='-define=CONFIG::debugging,${debug}'/> 
            <arg value='-define=CONFIG::release,${release}'/> 
            <arg value="${src.dir}/${document.root}.as"/>
            <arg value="-as3"/>
            <arg value="-benchmark"/>
            <arg value="-strict=true"/>
            <arg value="-debug=${debug}"/>
            <arg value="-optimize=true"/>
            <arg value="-defaults-css-url=${src.dir}/defaults.css"/>
            <arg value="-source-path=${src.dir}"/>
            <arg value="-library-path=${src.libs}"/>
            <arg value="-library-path=/Manaca2/bin/Manaca2.swc"/>
            <arg value="-output=${bin.dir}/${document.root}.swf"/>
        </exec>
    </target>
    
    <!-- ================================= 
          target: build-all-release              
         ================================= -->
    <target name="build-all-release"
            depends="properties, tests"
            description="Build release version including documentation and tests">
        <antcall target="project">
            <param name="debug" value="false"/>
            <param name="release" value="true"/>
        </antcall>
    </target>
    
    <!-- ================================= 
          target: build-all-debug              
         ================================= -->
    <target name="build-all-debug"
            depends="properties, tests"
            description="Build debug version including documentation and tests">
        <antcall target="project">
            <param name="debug" value="true"/>
            <param name="release" value="false"/>
        </antcall>
        <antcall target="docs"/>
    </target>
    
    <!-- ================================= 
          target: quick-debug              
         ================================= -->
    <target name="quick-debug" description="Build project only (debug)">
        <antcall target="project">
            <param name="debug" value="true"/>
            <param name="release" value="false"/>
        </antcall>
        <antcall target="docs"/>
    </target>
    
    <!-- ================================= 
          target: quick-release              
         ================================= -->
    <target name="quick-release" description="Build project only (quick-release)">
        <antcall target="project">
            <param name="debug" value="false"/>
            <param name="release" value="true"/>
        </antcall>
    </target>
    
    <!-- ================================= 
          target: quick-test              
         ================================= -->
    <target name="quick-test" 
         depends="properties, tests" 
         description="Build and test the project">
    </target>
</project>